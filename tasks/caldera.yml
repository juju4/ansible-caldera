---

- name: Ensure caldera dependencies are present
  ansible.builtin.package:
    name: "{{ caldera_pkg }}"
    state: present
  register: pkg_result
  until: pkg_result is success

- name: Ensure caldera user exists
  ansible.builtin.user:
    name: "{{ caldera_user }}"
    home: "{{ caldera_home }}"

- name: Import upx
  ansible.builtin.import_tasks: upx.yml

- name: Ensure recent pip & setuptools in virtualenv
  ansible.builtin.pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ caldera_home }}/env-caldera"
    virtualenv_python: "{{ python }}"
  with_items:
    - pip
    - setuptools
# FIXME! Failed to change ownership of the temporary files Ansible needs to create despite connecting
#       as root. Unprivileged become user would be unable to read the file.
#  become: yes
#  become_user: "{{ caldera_user }}"
  register: pkg_result
  until: pkg_result is success

- name: Ensure right permissions for env-caldera
  ansible.builtin.file:
    path: "{{ caldera_home }}/env-caldera"
    owner: "{{ caldera_user }}"
    recurse: true

- name: Clone caldera repo
  ansible.builtin.git:
    repo: https://github.com/mitre/caldera.git
    dest: "{{ caldera_rootdir }}"
    version: "{{ caldera_version }}"
    update: "{{ caldera_repo_update }}"
    recursive: true
  become: true
  become_user: "{{ caldera_user }}"

- name: Install caldera pip requirements
  ansible.builtin.pip:
    requirements: "{{ caldera_rootdir }}/requirements.txt"
    virtualenv: "{{ caldera_home }}/env-caldera"
    virtualenv_python: "{{ python }}"
  become: yes
  become_user: "{{ caldera_user }}"
  register: pkg_result
  until: pkg_result is success

- name: Build caldera server
  ansible.builtin.command:
    cmd: "{{ caldera_home }}/env-caldera/bin/python server.py --build"
  args:
    chdir: "{{ caldera_rootdir }}"
    creates: "{{ caldera_rootdir }}/conf/local.yml"
  become: yes
  become_user: "{{ caldera_user }}"
  # command both building and listening
  timeout: 60
  # not working, using ignore_errors
  # failed_when: false
  ignore_errors: true  # noqa ignore-errors
